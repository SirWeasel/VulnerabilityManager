import datetime
import json
from time import sleep
from threading import Thread
import nmap

from scans.models import Result


class ScanTool:


    def __init__(self):
        self.nm = nmap.PortScanner()


    def set_ports(self, ports=None):
        for port in ports:
            print(port)

    def activate_scans(self, scans=None):
        for scan in scans:
            scan.last_scan = datetime.datetime.now()
            scan.status = "s"
            scan.save()
            Thread(target=self.perform_scan,args=(scan,)).start()
        pass

    def check_port_list(self,input):
        try:
            list = input.split(',')
            for item in list:
                if not (0<= int(item) <=65535):
                    return False
            return True
        except:
            return False

    def perform_scan(self,scan):
        parameters = ""
        if scan.profile.port_type == "Light":
            parameters = "-A -T4"
        else:
            if self.check_port_list(scan.profile.port_list):
                parameters = "-A -T4 -p "+scan.profile.port_list
        for asset in scan.targets.assets.all():
            with open('/tmp/scanresults','a+') as f:
                f.write("Starting scan on " + parameters)
            self.nm.scan(hosts=asset.network_address,arguments=parameters)
            with open('/tmp/scanresults','a+') as f:
                f.write('\n'+self.nm.csv())
                f.write('\n'+json.dumps(self.nm.scanstats()))
                f.write('\n'+json.dumps(self.nm.analyse_nmap_xml_scan()))

        rez = self.create_results(scan,self.nm)
        scan.status="d"
        scan.result=rez
        scan.save()

    def callback_result(self, host, scan_result):
        print('------------------')

        print(host, scan_result)
    def create_results(self,scan,results):
        result_data = results.analyse_nmap_xml_scan()
        result = Result.objects.create(title=scan.scan_title+" results",
                                       xml_data=json.dumps(result_data),
                                       html_data=""
                                       )

        return result
