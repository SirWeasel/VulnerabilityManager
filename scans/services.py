import datetime
import json
from time import sleep
from threading import Thread
import nmap, paramiko

from knowledgebase.services import KnowledgeBaseConnector
from scans.models import Result


class ScanTool:


    def __init__(self):
        self.nm = nmap.PortScanner()
        self.results={
            "xml":"",
            "name":"",
        }


    def activate_scans(self, scans=None):
        for scan in scans:
            scan.last_scan = datetime.datetime.now()
            scan.status = "s"
            scan.save()
            Thread(target=self.perform_scan,args=(scan,)).start()
        pass



    def check_port_list(self,input):
        try:
            list = input.split(',')
            for item in list:
                if not (0<= int(item) <=65535):
                    return False
            return True
        except:
            return False


    def run_auth_scan(self,scan):
        cmd_to_execute ="lsb_release -a"
        for asset in scan.targets.assets.all():
            ssh = paramiko.SSHClient()
            ssh.connect(asset.network_address, username=asset.credentials.username, password=asset.credentials.password)
            ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(cmd_to_execute)
            with open('/tmp/scanresults','a+') as f:
                f.write("\nERR:  ",str(ssh_stderr))
                f.write("\nOUT:  ",str(ssh_stdout))
                f.write("\nIN:  "+str(ssh_stdin))



    def run_unauth_scan(self,scan):
        parameters = ""
        if scan.profile.port_type == "Light":
            parameters = "-A -T4"
        else:
            if self.check_port_list(scan.profile.port_list):
                parameters = "-A -T4 -p " + scan.profile.port_list
        for asset in scan.targets.assets.all():
            self.nm.scan(hosts=asset.network_address, arguments=parameters)
        self.results['xml'] = self.nm.analyse_nmap_xml_scan()


    def perform_scan(self,scan):
        if scan.profile.scan_type == "Auth":
            self.run_auth_scan(scan)
        else:
            self.run_unauth_scan(scan)

        self.results['name'] = scan.scan_title + "_results_"+str( datetime.datetime.now())
        #targets = json.dumps(self.results["xml"])['scan']
        #kb = KnowledgeBaseConnector()
        #for target in targets:
        #    for port in target['tcp']:
        #        kb.get_vulnerabilities(port['cpe'])
        rez = self.create_results()

        scan.status="d"
        scan.result=rez
        scan.save()

    def create_results(self):

        result = Result.objects.create(title=self.results['name'],
                                       xml_data=json.dumps(self.results['xml']),
                                       html_data=""
                                       )
        result.save()
        return result
