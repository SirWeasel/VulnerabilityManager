# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.contrib import admin

# Register your models here.
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.utils.safestring import mark_safe
import csv
from django.http import HttpResponse
from scans.models import Scan, ScanProfile, Result
from scans.services import ScanTool


class ScanAdmin(admin.ModelAdmin):
    list_display = [f.name for f in Scan._meta.fields if "id" not in f.name]
    readonly_fields = ["status","create_date","last_scan","result","result_reference"]
    list_display.remove("result")
    list_display.append("result_reference")


    def launch_scan(self, request, queryset):

        scan_tool = ScanTool()

        scan_tool.activate_scans(queryset)

        return HttpResponseRedirect("/scans/scan")


    launch_scan.short_description = "Launch scan(s)"
    actions = [launch_scan]
    search_fields = ('scan_title', )

    def result_reference(self, obj):
        display_text = "".join(
            "<a href={}>{}</a>".format(reverse('admin:{}_{}_change'.format(obj.result._meta.app_label, obj.result._meta.model_name),
                        args=(obj.result.pk,)),
                obj.result.title)
        )
        if display_text:
            return mark_safe(display_text)
        return "-"

    class Meta:
        model = Scan



class ScanProfileAdmin(admin.ModelAdmin):
    list_display = [f.name for f in ScanProfile._meta.fields  if "id" not in f.name]


    class Meta:
        model = ScanProfile
    class Media:
        js = ('/static/admin/js/hide_atribute.js',)


class ResultsAdmin(admin.ModelAdmin):
    list_display = [f.name for f in Result._meta.fields  if "id" not in f.name]

    readonly_fields = ["xml_data","create_date","knowledgebase_reference","knowledgebase"]

    def knowledgebase_reference(self,obj):
        display_text = ",<br> ".join([
            "<a href={}>{}</a>".format(
                reverse('admin:{}_{}_change'.format(kb._meta.app_label, kb._meta.model_name),
                        args=(kb.pk,)),
                kb.kb_name)
            for kb in obj.knowledgebase.all()
        ])
        if display_text:
            return mark_safe(display_text)
        return "-"

    def export_as_csv(self, request, queryset):
        meta = self.model._meta
        field_names = [field.name for field in meta.fields]

        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename={}.csv'.format(meta)
        writer = csv.writer(response)

        writer.writerow(field_names)
        for obj in queryset:
            row = writer.writerow([getattr(obj, field) for field in field_names])

        return response



    export_as_csv.short_description = "Export selected results as csv"
    actions = [export_as_csv]



    class Meta:
        model = Result


admin.site.register(Scan, ScanAdmin)
admin.site.register(ScanProfile,ScanProfileAdmin)
admin.site.register(Result, ResultsAdmin)
